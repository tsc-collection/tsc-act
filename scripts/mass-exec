#!/usr/bin/env act
# vim:set ft=ruby:

require 'tsc/session/telnet-manager.rb'
require 'tsc/session/ssh-manager.rb'
require 'tsc/test/accept/runner.rb'

require 'tsc/array.rb'

class Runner < TSC::Test::Accept::Runner
  def initialize(*args)
    super

    @success_count = 0
    @fail_count = 0
  end

  def start
    puts "### Command: #{command.inspect}"
    puts "### Hosts: #{hosts.size}"

    $stdout.sync = true
    $stderr.sync = true

    ensure_thread_completion hosts.map { |_host|
      on_host _host  do |_terminal, _screen, _prompt|
        report 'started', _host

        communicator = Communicator.new(_terminal, _screen, _prompt)

        lines = communicator.collect_output(command)
        code = communicator.last_exit_code

        if code == 0
          report_success _host, *lines
        else
          report_failure _host, "Terminated with exit code #{code}", *lines
        end
      end
    }
    puts
    puts "### Succeeded: #{@success_count}"
    puts "### Failed:    #{@fail_count}"
  end

  def on_host(host, &block)
    begin
      manager = connect(host)
      manager.verbose = options['verbose']

      manager.session do |_terminal|
        yield _terminal, _terminal.screen, manager.prompt
      end
    rescue => exception
      report_failure host, exception.message
      nil
    end
  end

  private
  #######

  def report_success(host, *lines)
    report 'succeeded', host, *lines

    @success_count += 1
  end

  def report_failure(host, reason, command = nil, *lines)
    report [ 'FAILED', '*' ] , host, command, *(lines + [ "[...#{reason}...]" ])

    @fail_count += 1
  end

  def report(message, host, command = nil, *lines)
    message, mark = Array(message)
    field = "%10.10s"
    puts [
      "#{(mark || ' ')[0].chr}#{field % message}: host=#{host.inspect}, time=#{timestamp}", 
      lines.squeeze.map { |_line| 
        (field % '') + '  > ' + _line 
      }
    ]
  end

  def command
    @command ||= begin
      item = params['command']
      case item
        when nil
          ARGV.shift or raise 'No command specified'

        when Hash
          raise "No command name specified (#{item.keys.join(', ')})" if ARGV.empty?
          item[ARGV.shift] or raise 'No named command found'

        else 
          Array(item).first.to_s
      end
    end
  end

  def hosts
    @hosts ||= Array(options['host'] || params['hosts'] || ARGV)
  end

  def connect(host)
    begin
      TSC::Session::SshManager.new(host, user, password) 
    rescue 
      TSC::Session::TelnetManager.new(host, user, password)
    end
  end

  def timestamp
    Time.now.strftime('%y-%m-%d@%H:%M:%S').inspect
  end

  def user
    @user ||= config['user'] || options['user'] or raise "No user specified"
  end

  def password 
    @password ||= config['password'] || options['password'] or raise "No password specified"
  end

  def config 
    @config ||= options['config'] || Hash.new
  end

  def params
    @params ||= config['mass-exec'] || Hash.new
  end
end

class Communicator 
  attr_reader :terminal, :screen, :prompt

  def initialize(terminal, screen, prompt)
    @terminal, @screen, @prompt = terminal, screen, prompt
  end

  def collect_output(command)
    lines = []
    screen.lock do
      terminal.typein "#{command}\n"
      screen.foreach_newline_until_prompt(prompt) do |_line|
        lines << _line 
      end
    end

    lines
  end

  def last_exit_code
    screen.lock do
      screen.wait_prompt prompt, 2
      terminal.typein "echo Exit code: ${?}\n"
      screen.wait_prompt prompt, 2

      code = screen.line_from_cursor(-1).scan(%r{^Exit code:\s+(\d+)\s+$}).flatten.compact.first
      raise 'Cannot get the last exit code' unless code

      code.to_i
    end
  end
end

require 'tsc/application.rb'

class Generator < TSC::Application
  in_generator_context do |_content|
    _content << '#!/usr/bin/env ' + File.join(self.class.installation_top, 'bin', 'act')
    _content << IO.readlines(__FILE__).slice(1..-1)
  end
end
